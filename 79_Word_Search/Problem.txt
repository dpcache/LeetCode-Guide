79. Word Search
Medium

Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. 
The same letter cell may not be used more than once.

Input: board = [
    ["A","B","C","E"],
    ["S","F","C","S"],
    ["A","D","E","E"]], 
    word = "ABCCED"
Output: true


Input: board = [
    ["A","B","C","E"],
    ["S","F","C","S"],
    ["A","D","E","E"]], 
    word = "SEE"
Output: true
 
Input: board = [
    ["A","B","C","E"],
    ["S","F","C","S"],
    ["A","D","E","E"]], word = "ABCB"
Output: false

Constraints:

m == board.length
n = board[i].length
1 <= m, n <= 6
1 <= word.length <= 15
board and word consists of 
only lowercase and uppercase English letters.
 

Follow up: Could you use 
search pruning to make your solution faster 
with a larger board?
// pruning: case 1: not enough characters in board
if (word.length() > m * n) return false;

// pruning: case 2: board does not contain characters or enough characters that word contains
Map<Character, Integer> count = new HashMap<>();
for (int i = 0; i < m; i++) {
    for (int j = 0; j < n; j++) {
        int temp = count.getOrDefault(board[i][j], 0);
        count.put(board[i][j], temp + 1);
    }
}
        