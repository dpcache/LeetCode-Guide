var permute = function (nums) {
    let res = [];

    if (nums.length === 1) {
        //Create copy array
        //Option 1:
        //console.log([nums.slice()]);
        //Option 2: 
        //console.log([[...nums]]);
        return [nums];
    }

    for (let i = 0; i < nums.length; i++) {
        const num = nums.shift();
        const permutations = permute(nums.slice());

        //for in loops over enumerable property names of an object. 
        //Property keys of an object
        //for of (new in ES6) does use an object-specific iterator and loops over the values generated by that.
        //Property Values of an object. //Usually use this one for shortcut regular for loop.
        //for (per of permutations) {
        //  per.push(num);
        //}
        
        for (let i = 0; i < permutations.length; i++) {
            permutations[i].push(num);
        }
        
        // JavaScript Append Array to Another
        // Option 1:
        // res.push.apply(res, permutations);
        // Option 2:
        // res = res.concat(permutations);
        res = res.concat(permutations);
        nums.push(num);
    }

    return res;
};

/// Option 2
var permute = function(nums) {
    
    const res = [];
    const permutations = new Set();
    dfs();
    return res;
    
    function dfs() {
        if (permutations.size === nums.length) {
            return res.push([...permutations]);
        }
        
        for (let i = 0; i < nums.length; i++) {
            if (permutations.has(nums[i])) {
                continue; 
            }
            permutations.add(nums[i]); 
            dfs();  
            permutations.delete(nums[i]);
        }
    }
}
